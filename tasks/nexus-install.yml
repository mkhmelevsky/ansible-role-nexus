---
# file: tasks/nexus-install.yml

- name: Tasks performed under nexus_user account
  become: yes
  become_user: "{{ nexus_user }}"
  block:
  - name: Get Nexus SHA1 cheksum file
    get_url:
      dest: "{{ nexus_directory_package }}/latest-unix.tar.gz.sha1"
      url: "{{ nexus_download_url }}/latest-unix.tar.gz.sha1"
    register: task_result
    retries: 3
    delay: 2
    until: task_result is succeeded

  - name: Determine if Nexus archive is already here
    stat:
      path: "{{ nexus_directory_package }}/latest-unix.tar.gz"
    register: nexus_tar_file

  - name: Download Nexus archive if absent
    get_url:
      dest: "{{ nexus_directory_package }}/latest-unix.tar.gz"
      url: "{{ nexus_download_url }}/latest-unix.tar.gz"
    when:
      - nexus_tar_file.stat.exists is defined
      - not nexus_tar_file.stat.exists
    register: task_result
    retries: 3
    delay: 2
    until: task_result is succeeded

  - name: Verify Nexus SHA1 checksum
    shell: "[[ \"$(cat {{ nexus_directory_package }}/latest-unix.tar.gz.sha1)\" == \"$(sha1sum {{ nexus_directory_package }}/latest-unix.tar.gz | awk '{print $1}')\" ]]"

  - name: Determine Nexus version
    shell: 'tar --list -f {{ nexus_directory_package }}/latest-unix.tar.gz | grep -m 1 nexus | sed "s/^nexus-\([0-9\.-]*\).*/\1/"'
    args:
      warn: False
    register: command_result

  - name: Set nexus_version variable
    set_fact:
      nexus_version: "{{ command_result.stdout }}"

  - name: Unpack Nexus archive
    unarchive:
      copy: no
      creates: "{{ nexus_directory_package }}/nexus-{{ nexus_version }}"
      dest: "{{ nexus_directory_package }}"
      src: "{{ nexus_directory_package }}/latest-unix.tar.gz"
    register: task_result
    retries: 3
    delay: 2
    until: task_result is succeeded

  - name: Delete tar file
    when: nexus_delete_downloaded_tar is defined and nexus_delete_downloaded_tar
    file:
      path: "{{ nexus_directory_package }}/latest-unix.tar.gz"
      state: absent
    register: task_result
    retries: 3
    delay: 2
    until: task_result is succeeded

  - name: Make symbolic link to Nexus directory
    file:
      dest: "{{ nexus_directory_home }}"
      src: "{{ nexus_directory_package }}/nexus-{{ nexus_version }}"
      state: link
    register: task_result
    retries: 3
    delay: 2
    until: task_result is succeeded

  - name: Add NEXUS_HOME for Nexus user
    lineinfile:
      create: yes
      dest: "{{ nexus_user_home_directory }}/.bashrc"
      insertafter: EOF
      line: "export NEXUS_HOME={{ nexus_directory_home }}"
    register: task_result
    retries: 3
    delay: 2
    until: task_result is succeeded

  - name: Add run_as_user to Nexus.rc
    lineinfile:
      create: yes
      dest: "{{ nexus_directory_home }}/bin/nexus.rc"
      insertafter: EOF
      line: "run_as_user=\"{{ nexus_user }}\""
      regexp: "^run_as_user"
    register: task_result
    retries: 3
    delay: 2
    until: task_result is succeeded


- name: Perform privileged installation tasks
  become: True
  block:
  - name: Raise nofile limit for Nexus user
    pam_limits:
      domain: "{{ nexus_user }}"
      limit_type: "-"
      limit_item: nofile
      value: "{{ nexus_ulimit }}"
    register: task_result
    retries: 3
    delay: 2
    until: task_result is succeeded

  - name: Ensure session limits are used
    lineinfile:
      line: "session     required      pam_limits.so"
      dest: "{{ nexus_pam_system_auth_file }}"
      insertafter: EOF
    register: task_result
    retries: 3
    delay: 2
    until: task_result is succeeded

  - name: Create Nexus service file from template for SystemD
    template:
      dest: /lib/systemd/system/nexus.service
      mode: 0644
      src: nexus.systemd.j2
    when: ansible_service_mgr == "systemd"
    register: task_result
    retries: 3
    delay: 2
    until: task_result is succeeded

  - name: Ensure Nexus service is enabled for SystemD
    systemd:
      daemon_reload: yes
      enabled: yes
      name: nexus
    when:
      - ansible_service_mgr == "systemd"
      - nexus_service_enabled
    register: task_result
    retries: 3
    delay: 2
    until: task_result is succeeded

...
