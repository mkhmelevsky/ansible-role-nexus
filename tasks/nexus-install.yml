---
# file: tasks/nexus-install.yml

- name: Perform unprivileged installation tasks first
  become: yes
  become_user: "{{ nexus_user }}"
  block:
  - name: Create Nexus directories
    file:
      group: "{{ nexus_group }}"
      owner: "{{ nexus_user }}"
      path: "{{ item }}"
      state: directory
    with_items:
      - "{{ nexus_directory_log }}"
      - "{{ nexus_directory_data }}"
      - "{{ nexus_directory_data }}/etc"
      - "{{ nexus_directory_package }}"
      - "{{ nexus_directory_tmp }}"
    register: task_result
    retries: 3
    delay: 2
    until: task_result is succeeded

  - name: Download Nexus SHA1 sum
    get_url:
      dest: "{{ nexus_directory_package }}/latest-unix.tar.gz.sha1"
      url: "{{ nexus_download_url }}/latest-unix.tar.gz.sha1"
    register: task_result
    retries: 3
    delay: 2
    until: task_result is succeeded

  - name: Download Nexus
    get_url:
      dest: "{{ nexus_directory_package }}/latest-unix.tar.gz"
      url: "{{ nexus_download_url }}/latest-unix.tar.gz"
    register: task_result
    retries: 3
    delay: 2
    until: task_result is succeeded

  - name: Verify Nexus signature
    shell: "[[ \"$(cat {{ nexus_directory_package }}/latest-unix.tar.gz.sha1)\" == \"$(sha1sum {{ nexus_directory_package }}/latest-unix.tar.gz | awk '{print $1}')\" ]]"

  - name: Determine Nexus version
    shell: 'tar --list -f {{ nexus_directory_package }}/latest-unix.tar.gz | grep -m 1 nexus | sed "s/^nexus-\([0-9\.-]*\).*/\1/"'
    register: command_result

  - name: Set nexus_version variable
    set_fact:
      nexus_version: "{{ command_result.stdout }}"

  - debug:
      msg: "Determined Nexus version: {{ nexus_version }}"

  - name: Unpack Nexus
    unarchive:
      copy: no
      creates: "{{ nexus_directory_package }}/nexus-{{ nexus_version }}"
      dest: "{{ nexus_directory_package }}"
      src: "{{ nexus_directory_package }}/latest-unix.tar.gz"
    register: task_result
    retries: 3
    delay: 2
    until: task_result is succeeded

  - name: Make symbolic link to Nexus Directory
    file:
      dest: "{{ nexus_directory_home }}"
      src: "{{ nexus_directory_package }}/nexus-{{ nexus_version }}"
      state: link
    register: task_result
    retries: 3
    delay: 2
    until: task_result is succeeded

  - name: Add NEXUS_HOME for Nexus user
    lineinfile:
      create: yes
      dest: "{{ nexus_user_home_directory }}/.bashrc"
      insertafter: EOF
      line: "export NEXUS_HOME={{ nexus_directory_home }}"
    register: task_result
    retries: 3
    delay: 2
    until: task_result is succeeded

  - name: Add run_as_user to Nexus.rc
    lineinfile:
      create: yes
      dest: "{{ nexus_directory_home }}/bin/nexus.rc"
      insertafter: EOF
      line: "run_as_user=\"{{ nexus_user }}\""
      regexp: "^run_as_user"
    register: task_result
    retries: 3
    delay: 2
    until: task_result is succeeded

- name: Perform privileged tasks
  become: True
  block:
  - name: Raise nofile limit for Nexus user
    pam_limits:
      domain: "{{ nexus_user }}"
      limit_type: "-"
      limit_item: nofile
      value: "{{ nexus_ulimit }}"
    register: task_result
    retries: 3
    delay: 2
    until: task_result is succeeded

  - name: Ensure session limits are used
    lineinfile:
      line: "session     required      pam_limits.so"
      dest: "{{ nexus_pam_system_auth_file }}"
      insertafter: EOF
    register: task_result
    retries: 3
    delay: 2
    until: task_result is succeeded

  - name: Create Nexus service file from template for SystemD
    template:
      dest: /lib/systemd/system/nexus.service
      mode: 0644
      src: nexus.systemd.j2
    when: ansible_service_mgr == "systemd"
    register: task_result
    retries: 3
    delay: 2
    until: task_result is succeeded

  - name: Ensure Nexus service is enabled for SystemD
    systemd:
      daemon_reload: yes
      enabled: yes
      name: nexus
    when:
      - ansible_service_mgr == "systemd"
      - nexus_service_enabled
    register: task_result
    retries: 3
    delay: 2
    until: task_result is succeeded

...
